@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<div class="d-flex w-100 min-vh-90 justify-content-center align-items-center">
    <div class="row">
        <div class="col shadow-no-hover p-5">

            @if (_attemptSignInSuccess)
            {
                <h3 class="text-center my-3">Sign in successful!</h3>
            }
            else
            {
                <h3 class="text-center fw-bold">You are not sign in!</h3>
                <h5 class="text-center mt-2 mb-5">After signing in, you will be remember for 4 weeks.</h5>

                <EditForm Model="_user" OnValidSubmit="SignInUser">
                    <DataAnnotationsValidator />
                    <div class="form-group my-3">
                        <label for="email">Email Address</label>
                        <InputText @bind-Value="_user.EmailAddress" id="email" class="form-control" />
                        <ValidationMessage For="@(() => _user.EmailAddress)" />
                    </div>
                    <div class="form-group my-3">
                        <label for="password">Password</label>
                        <InputText @bind-Value="_user.Password" id="password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => _user.Password)" />
                    </div>
                    <ValidationSummary />
                    <button type="submit" class="btn btn-primary shadow w-100 md-f-size-1-5">
                        Sign In
                    </button>
                </EditForm>
            }

        </div>
    </div>
</div>

<div class="position-fixed bottom-0 end-5 z-index-5">

    @if (_attemptSignInSuccess)
    {
        <Toast IsError="false"
           ToastTitle="Sign in success!"
           ToastBody="Redirecting..."
           ParentMethodToCallOnClose="() => _attemptSignInSuccess = false" />
    }
    @if (_attemptSignInFailed)
    {
        <Toast IsError="true"
           ToastTitle="Sign in failed!"
           ToastBody="Please try again!"
           ParentMethodToCallOnClose="() => _attemptSignInFailed = false" />
    }

</div>

@code {
    private bool _attemptSignInFailed = false;
    private bool _attemptSignInSuccess = false;
    private User _user = new();

    private async Task SignInUser()
    {
        var response = await HttpClient.PostAsJsonAsync<User>(ApiEndpoints.s_signIn, _user);

        if (!response.IsSuccessStatusCode)
            _attemptSignInFailed = true;
        else
        {
            string JsonWebToken = await response.Content.ReadAsStringAsync();

            await LocalStorage.SetItemAsync("bearerToken", JsonWebToken);

            await ((AppAuthenticationStateProvider)AuthStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", JsonWebToken);

            _attemptSignInSuccess = true;

            NavManager.NavigateTo("/admin");
        }
    }
}
