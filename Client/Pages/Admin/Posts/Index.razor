@page "/admin/posts"

@implements IDisposable
@inject InMemoryDatabaseCache InMemDb
@inject HttpClient HttpClient

<main class="admin-area-main">

    <Sidebar />

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1>Posts</h1>
                <br />
                <br />
                <br />

                @if (InMemDb.Posts == null || _attemptDeletePost)
                {
                    <LoadingDot />
                }
                else
                {
                    <a href="/admin/posts/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                        <i class="fas fa-plus"></i> Create Post
                    </a>
                    <button @onclick="() => InMemDb.GetPostsFromDbAndCache()" class="btn btn-primary shadow md-f-size-1-5">
                        <i class="fas fa-sync"></i> Refresh Data
                    </button>
                    <br />
                    <br />
                    <br />

                    @if (InMemDb.Posts.Count < 1)
                    {
                        <h1>No Post found! Please create one.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Post</th>
                                        <th scope="col">Thumbnail</th>
                                        <th scope="col">Title</th>
                                        <th scope="col">Author</th>
                                        <th scope="col">Excerpt</th>
                                        <th scope="col">Publish Date</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var post in InMemDb.Posts)
                                    {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@post.Category.Name</p>
                                            </th>
                                            <td class="w-40">
                                                <img src="@($"{ApiEndpoints.ServerBaseUrl}/{post.ThumbnailImagePath}")" class="admin-index-thumbnail-image" />
                                            </td>
                                            <td class="w-8">
                                                <p>@post.Title</p>
                                            </td>
                                            <td class="w-8">
                                                <p>@post.Author</p>
                                            </td>
                                            <td class="w-14">
                                                <p>@post.Excerpt</p>
                                            </td>
                                            <td class="w-14">
                                                <p>@(post.IsPublished ? $"{post.PublishDate} UTC" : "Not published")</p>
                                            </td>
                                            <td class="w-30">
                                                <div class="d-flex flex-column">

                                                    @if (!post.IsPublished)
                                                    {
                                                        <button class="btn btn-success shadow md-f-size-1-5">
                                                            <i class="fas fa-eye"></i> Publish
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-secondary shadow md-f-size-1-5">
                                                            <i class="fas fa-eye-slash"></i> Unpublish
                                                        </button>
                                                    }

                                                    <a href="/admin/posts/update/@post.PostId" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Update
                                                    </a>
                                                    <br />
                                                    <button @onclick="(() => DeletePost(post))" class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }

                <div class="position-fixed bottom-0 end-5 z-index-5">

                    @if (_successDeletePost)
                    {
                        <Toast IsError="false"
                           ToastTitle="Delete success!"
                           ToastBody="The Post has been removed!"
                           ParentMethodToCallOnClose="() => _successDeletePost = false" />
                    }

                    @if (_unsuccessDeletePost)
                    {
                        <Toast IsError="true"
                           ToastTitle="Delete failed!"
                           ToastBody="@_reasonUnsuccessDeletePost"
                           ParentMethodToCallOnClose="() => _unsuccessDeletePost = false" />
                    }

                </div>

            </div>
        </div>
    </div>
</main>

@code
{
    private bool _attemptDeletePost = false;
    private bool _successDeletePost = false;
    private bool _unsuccessDeletePost = false;
    private string _reasonUnsuccessDeletePost = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        InMemDb.OnPostsDataChanged += StateHasChanged;

        if (InMemDb.Posts == null)
        {
            await InMemDb.GetPostsFromDbAndCache();
        }
    }

    public void Dispose() => InMemDb.OnPostsDataChanged -= StateHasChanged;

    private async void DeletePost(Post PostToDelete)
    {
        _attemptDeletePost = true;
        HttpResponseMessage response = await HttpClient.DeleteAsync($"{ApiEndpoints.s_posts}/{PostToDelete.PostId}");

        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            if (InMemDb.Posts.Remove(PostToDelete))
            {
                _successDeletePost = true;
            }
            else
            {
                _reasonUnsuccessDeletePost = "Error with InMemDb!";
                _unsuccessDeletePost = true;
            }
        }
        else
        {
            _reasonUnsuccessDeletePost = $"Error with api endpoint: {response.StatusCode}.";
            _unsuccessDeletePost = true;
        }
        _attemptDeletePost = false;
        StateHasChanged();
    }
}