@page "/blog/{CategoryName}/{PostTitle}"

@inject InMemoryDatabaseCache InMemDb
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime

<Navbar />

<main class="container min-vh-90 py-5">

    @if (_category == null || _post == null)
    {
        <LoadingDot />
    }
    else
    {
        <div class="row">
            <div class="col-12 px-md-0">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb md-f-size-1-5">
                        <li class="breadcrumb-item"><a href="/blog">Blog</a></li>
                        <li class="breadcrumb-item"><a href="@($"/blog/{CategoryName}")">@CategoryName</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@_post.Title</li>
                    </ol>
                </nav>
            </div>
            <div class="col-12 shadow-no-hover py-5 px-md-5 mt-3">
                <article class="blog-post">
                    <h2 class="fst-italic"></h2>
                    <p>@_post.PublishDate.Split(' ').First() by <a href="/about" class="text-dark">@_post.Author</a></p>
                    <hr/>

                    @if (_loadingContent)
                    {
                        <LoadingDot />
                    }

                    <div @ref="_quillJsReadOnlyEditorDiv" class="p-0 mt-5"></div>

                </article>
            </div>
            <div class="col-12 px-0 d-flex justify-content-end">
                <a href="@($"/blog/{CategoryName}")" class="btn btn-secondary shadow">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            </div>
        </div>
    }

</main>

<Footer />

@code {
    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public string PostTitle { get; set; }

    private Category _category = null;
    private Post _post = null;
    private ElementReference _quillJsReadOnlyEditorDiv;
    private bool _loadingContent = false;

    protected async override Task OnParametersSetAsync()
    {
        _loadingContent = true;

        _category = await InMemDb.GetCategoryByName(CategoryName.ConvertURLToTitle(), true, true);

        _post = _category.Posts.First(p => p.Title.ToLowerInvariant() == PostTitle.ConvertURLToTitle());

        StateHasChanged();

        await Task.Delay(500);

        await JsRuntime.InvokeVoidAsync("QuillFunctions.createQuill", _quillJsReadOnlyEditorDiv, false);

        if (!string.IsNullOrEmpty(_post.Content))
            await JsRuntime.InvokeAsync<object>("QuillFunctions.setQuillContent", _quillJsReadOnlyEditorDiv, _post.Content);

        await JsRuntime.InvokeAsync<object>("QuillFunctions.disableQuillEditor", _quillJsReadOnlyEditorDiv);

        _loadingContent = false;

        StateHasChanged();
    }
}
